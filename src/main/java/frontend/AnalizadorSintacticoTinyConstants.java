/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package frontend;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int validCharNoEscape = 4;
  /** RegularExpression Id. */
  int validChar = 5;
  /** RegularExpression Id. */
  int escapeBody = 6;
  /** RegularExpression Id. */
  int hexChar = 7;
  /** RegularExpression Id. */
  int TRUE = 10;
  /** RegularExpression Id. */
  int FALSE = 11;
  /** RegularExpression Id. */
  int INT = 12;
  /** RegularExpression Id. */
  int BOOL = 13;
  /** RegularExpression Id. */
  int CHAR = 14;
  /** RegularExpression Id. */
  int STRING = 15;
  /** RegularExpression Id. */
  int DOUBLE = 16;
  /** RegularExpression Id. */
  int TYPE = 17;
  /** RegularExpression Id. */
  int VAR = 18;
  /** RegularExpression Id. */
  int WHILE = 19;
  /** RegularExpression Id. */
  int PROC = 20;
  /** RegularExpression Id. */
  int CALL = 21;
  /** RegularExpression Id. */
  int WITH = 22;
  /** RegularExpression Id. */
  int NEW = 23;
  /** RegularExpression Id. */
  int DELETE = 24;
  /** RegularExpression Id. */
  int STRUCT = 25;
  /** RegularExpression Id. */
  int DO = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int THEN = 28;
  /** RegularExpression Id. */
  int ELSE = 29;
  /** RegularExpression Id. */
  int SWITCH = 30;
  /** RegularExpression Id. */
  int CASE = 31;
  /** RegularExpression Id. */
  int DEFAULTT = 32;
  /** RegularExpression Id. */
  int NULL = 33;
  /** RegularExpression Id. */
  int READ = 34;
  /** RegularExpression Id. */
  int WRITE = 35;
  /** RegularExpression Id. */
  int identificador = 36;
  /** RegularExpression Id. */
  int numeroEntero = 37;
  /** RegularExpression Id. */
  int realNumber = 38;
  /** RegularExpression Id. */
  int realPart = 39;
  /** RegularExpression Id. */
  int exponentialPart = 40;
  /** RegularExpression Id. */
  int stringLiteral = 41;
  /** RegularExpression Id. */
  int charLiteral = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<validCharNoEscape>",
    "<validChar>",
    "<escapeBody>",
    "<hexChar>",
    "<token of kind 8>",
    "<token of kind 9>",
    "<TRUE>",
    "<FALSE>",
    "<INT>",
    "<BOOL>",
    "<CHAR>",
    "<STRING>",
    "<DOUBLE>",
    "<TYPE>",
    "<VAR>",
    "<WHILE>",
    "<PROC>",
    "<CALL>",
    "<WITH>",
    "<NEW>",
    "<DELETE>",
    "<STRUCT>",
    "<DO>",
    "<IF>",
    "<THEN>",
    "<ELSE>",
    "<SWITCH>",
    "<CASE>",
    "<DEFAULTT>",
    "<NULL>",
    "<READ>",
    "<WRITE>",
    "<identificador>",
    "<numeroEntero>",
    "<realNumber>",
    "<realPart>",
    "<exponentialPart>",
    "<stringLiteral>",
    "<charLiteral>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"&\"",
    "\"*\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"&&\"",
  };

}
