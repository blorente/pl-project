options  {
  STATIC=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package frontend;

import program.Program.Prog;
import program.Program.Dec;
import program.Program.Inst;
import program.Program.DeclaredType;
import program.Program.FParam;
import program.Program.Exp;


import frontend.ASTOps.Lista;

class CabezaProcAs {
   public String proc;
   public Lista<FParam> fparams;
   public CabezaProcAs(String proc, Lista<FParam> fparams) {
      this.proc = proc;
      this.fparams = fparams;
   }
}

public class AnalizadorSintacticoTiny {
   private ASTOps ops;
   public void setOps(ASTOps ops) {
     this.ops = ops;
   }
   String enlaceFuente(Token token) {
    return "fila "+token.beginLine+" columna "+token.beginColumn;
   }
}
PARSER_END(AnalizadorSintacticoTiny)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 

  TOKEN:{<#validCharNoEscape: <letra> | " ">}
  TOKEN:{<#validChar: <validCharNoEscape> | "\\" <escapeBody>>}
  TOKEN:{<#escapeBody: "\"" | "n" | "'" | "\\" | "u" <hexChar> <hexChar> <hexChar> <hexChar>>}
  TOKEN:{<#hexChar: <digito> | ["A"-"F"] >}

  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"//"(~["\n"])*>}  

  TOKEN:{<TRUE:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN:{<FALSE:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<INT:("i"|"I")("n"|"N")("t"|"T")>}
  TOKEN:{<BOOL:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
  TOKEN:{<CHAR:("c"|"C")("h"|"H")("a"|"A")("r"|"R")>}
  TOKEN:{<STRING:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN:{<DOUBLE:("f"|"F")("l"|"L")("o"|"O")("a"|"A")("t"|"T")>}
  TOKEN:{<TYPE:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN:{<VAR:("v"|"V")("a"|"A")("r"|"R")>}
  TOKEN:{<WHILE:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN:{<PROC:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN:{<CALL:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  TOKEN:{<WITH:("w"|"W")("i"|"I")("t"|"T")("h"|"H")>}
  TOKEN:{<NEW:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN:{<DELETE:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN:{<identificador:<letra>(<letra>|<digito>)*>}
  TOKEN:{<numeroEntero: <digitoPositivo> (<digito>)* |"0" >}

  TOKEN:{<realNumber: <numeroEntero> (<realPart>|"") (<exponentialPart>|"")>}
  TOKEN:{<realPart: "." ("0"|(<digito>)*)>}
  TOKEN:{<exponentialPart: ("e"|"E") ("-"|"") <numeroEntero> >}

  TOKEN:{<stringLiteral: "\"" (<validChar>)* "\"">}
  TOKEN:{<charLiteral: "'" (<validChar> | "\"") "'" >}


  void inicio()        : {} {program() <EOF>}

  Prog program()      :
    {Lista<Dec> dec; Inst ins;} 
    {
     dec = declaraciones() ins = instruccion() 
        {return ops.prog(dec,ins);}
    }

  Lista<Dec> declaraciones() : 
    {Lista<Dec> decs;} 
    {
      decs=listaDeclaraciones() 
        {return decs;}                            
            | 
        {return ops.nodecs();}
    }


  Lista<Dec> listaDeclaraciones() : 
    {Dec dec; Lista<Dec> decs;} 
    {
      dec=declaracion() 
      decs=rListaDeclaraciones(ops.decs(ops.nodecs(),dec)) 
          {return decs;}
    }

  Lista<Dec> rListaDeclaraciones(Lista<Dec> decsh) : 
     {Dec dec; Lista<Dec> decs;} 
     {
       dec=declaracion() decs=rListaDeclaraciones(ops.decs(decsh,dec)) 
           {return decs;} 
              | 
           {return decsh;}
     }

  Dec declaracion() : 
     {DeclaredType tipo;  Token id; Token proc;
      CabezaProcAs cabezaProc$as; Inst ins;} 
     {
        <TYPE> tipo = tipo0() id=<identificador> ";"
          {return ops.dectype(tipo,id.image,enlaceFuente(id));}
            |
        <VAR> tipo = tipo0() id=<identificador> ";"  
          {return ops.decvar(tipo,id.image,enlaceFuente(id));}
            |
	proc=<PROC> cabezaProc$as = cabezaProc() ins = bloque() pyComa()
          {return ops.decProc(cabezaProc$as.proc, cabezaProc$as.fparams, ins,
                              enlaceFuente(proc));} 
      }

  CabezaProcAs cabezaProc() : 
     {Lista<FParam> fparams; Token id;} 
     {
       id=<identificador> "(" fparams = parametrosFormales() ")"
          {return new CabezaProcAs(id.image,fparams);}
     }

  Lista<FParam> parametrosFormales() : 
     {Lista<FParam> fparams;} 
     {
       fparams = listaParametrosFormales() 
         {return fparams;}
         | 
         {return ops.nofparams();}
     }

  Lista<FParam> listaParametrosFormales() : 
     {FParam fparam;  
      Lista<FParam> fparams;} 
     {
       fparam = parametroFormal() 
       fparams = rListaParametrosFormales(ops.fparams(ops.nofparams(),fparam))
          {return fparams;}
     }

  Lista<FParam> rListaParametrosFormales(Lista<FParam> fparamsh) : 
     {FParam fparam;
      Lista<FParam> fparams;} 
     {"," fparam = parametroFormal() 
      fparams= rListaParametrosFormales(ops.fparams(fparamsh,fparam)) 
      {return fparams;}
      | 
      {return fparamsh;}
     }

  FParam parametroFormal() : 
     {DeclaredType tipo; boolean porRef; Token id;} 
     {
      tipo = tipo0() porRef = modo() id=<identificador>
        {return ops.fparam(tipo,porRef,id.image,enlaceFuente(id));}
     }

  boolean modo() : 
    {} 
    {
     "&" 
       {return true;} 
      | 
       {return false;}
    }
  
  DeclaredType tipo0() : 
    {DeclaredType tipo$tipo1;
     DeclaredType tipo$rTipo0;}
    {
      tipo$tipo1=tipo1() tipo$rTipo0 = rTipo0(tipo$tipo1)
        {return tipo$rTipo0;}
    }

  DeclaredType rTipo0(DeclaredType tipoh) : 
    {DeclaredType tipo; } 
    {
      "*" tipo=rTipo0(ops.tipoPointer(tipoh)) 
        {return tipo;}   
       | 
        {return tipoh;}
    }

  DeclaredType tipo1() : 
    {Token id; } 
    {
      <INT>
        {return ops.tInt();}
        | 
      <BOOL> 
        {return ops.tBool();}
        |
      <DOUBLE>
        {return ops.tReal();}
        |
      <STRING>
        {return ops.tUniString();}
        |
      <CHAR>
       {return ops.tUniChar();}
       |
      id=<identificador> 
        {return ops.tref(id.image,enlaceFuente(id));}
    }


  Inst instruccion() : 
    {Inst ins;} 
    {
     ins = iasig()   
      {return ins;}
      | 
     ins = iblock()
      {return ins;} 
      | 
     ins = iwhile()  
      {return ins;} 
      | 
     ins = icall()   
      {return ins;} 
      | 
     ins = inew()     
      {return ins;} 
      | 
     ins = idelete() 
      {return ins;}
    }

  Inst iasig() : 
    {Exp el,er; Token asig;} 
    {
     el=exp0() asig="=" er=exp0() ";"
      {return ops.iasig(el,er,enlaceFuente(asig));} 
    }

  Inst iblock() :
   {Inst ins;} 
  {
    ins=bloque() pyComa()
      {return ins;}
  }

  Inst iwhile() : 
   {Exp exp; Inst i; Token While;} 
   {
     While=<WHILE> exp=exp0() i=bloque() pyComa()
      {return ops.iwhile(exp,i,enlaceFuente(While));}
   }

  
  Inst icall() : 
     {Token id;  Lista<Exp> rparams;}  
     {
      <CALL> id=<identificador> rparams=parametrosReales() ";"
         {return ops.icall(id.image,rparams,enlaceFuente(id));}
     }
  Lista<Exp> parametrosReales() : 
    {Lista<Exp> rparams;} 
    {
      <WITH> rparams=listaParametrosReales() 
         {return rparams;}
      |
         {return ops.norparams();}
    }
  Lista<Exp> listaParametrosReales() : 
   {Exp rparam; Lista<Exp> rparams;} 
  {
    rparam=exp0() rparams=rListaParametrosReales(ops.rparams(ops.norparams(),rparam))
     {return rparams;}
  }
  Lista<Exp> rListaParametrosReales(Lista<Exp> rparamsh) : 
    {Exp rparam; Lista<Exp> rparams;} 
   { 
     "," rparam = exp0() rparams=rListaParametrosReales(ops.rparams(rparamsh,rparam)) 
       {return rparams;}
 
     | 
    {return rparamsh;}
   }

  
  Inst inew() : 
    {Token cnew; Exp desig;} 
    {
     cnew=<NEW> desig=exp0() ";"
        {return ops.inew(desig,enlaceFuente(cnew));}
    }
  
  Inst idelete() : 
    {Token cdelete; Exp desig;} 
    {
      cdelete=<DELETE> desig=exp0() ";"
         {return ops.idelete(desig,enlaceFuente(cdelete));}
    }

  Inst bloque() : 
    {Lista<Dec> decs; Lista<Inst> is;} 
   {
     "{" decs= declaraciones() is=instrucciones() "}" 
         {return ops.iblock(decs,is);}
   }
  Lista<Inst> instrucciones() : 
    {Lista<Inst> insts;} 
    {
     insts=listaInstrucciones()
       {return insts;} 
     | 
       {return ops.noInsts();}
    }
  Lista<Inst> listaInstrucciones() : 
    {Inst ins; Lista<Inst> insts;} 
    {
      ins=instruccion() insts=rListaInstrucciones(ops.insts(ops.noInsts(),ins))
        {return insts;}
    }
  Lista<Inst> rListaInstrucciones(Lista<Inst> instsh) : 
   {Inst ins; Lista<Inst> insts;} 
   {
     ins=instruccion() insts=rListaInstrucciones(ops.insts(instsh,ins))
        {return insts;} 
     | 
     {return instsh;}
   }
    
  void pyComa() : {} {";" | {}}
  
  Exp exp0() : 
   {Exp exp; } 
   {
    exp = exp1()  
     {return exp;}
   }

  Exp exp1() : 
   {Exp exp$exp2, exp$rexp1;} 
   {
     exp$exp2=exp2()  exp$rexp1=rexp1(exp$exp2)
       {return exp$rexp1;}
   }
  Exp rexp1(Exp exph) : 
    {Token op; Exp exp$exp2, exp$rexp1;} 
    {
      op=opAditivo() exp$exp2=exp2() 
      exp$rexp1=rexp1(ops.opBin(op.image,exph,exp$exp2,enlaceFuente(op)))
         {return exp$rexp1;} 
      | 
      {return exph;}
    }

  Token opAditivo() : 
    {Token t;} 
    {
     t="+"
      {return t;} 
    }
  
  Exp exp2() : 
    {Exp exp$exp3, exp$rexp2;} 
    {
     exp$exp3=exp3() exp$rexp2=rexp2(exp$exp3) 
        {return exp$rexp2;}
    }
  Exp rexp2(Exp exph) : 
    {Exp exp; Token t;} 
    {
     t="&&" exp=exp3()
       {return ops.opBin(t.image,exph,exp,enlaceFuente(t));} 
     | 
       {return exph;}
    }
  
  Exp exp3() : 
    {Exp exp;} 
    {
      exp=exp4()
      {return exp;}
    }
  
  Exp exp4() : 
    {Exp exp;} 
    {
      exp=exp5() 
        {return exp;}
    }

  Exp exp5() : 
    {Exp exp;} 
    {
     exp=exp6() 
       {return exp;}
    } 

  Exp exp6() : 
    {Exp exp; Token t;} 
    {
      t="*" exp=exp6()  
       {return ops.opUn(t.image,exp,enlaceFuente(t));}
     | 
     exp=exp7() 
       {return exp;}
    }
  
  Exp exp7() : 
     {Token t; Exp e;} 
     {
      t=<identificador> 
       {return ops.var(t.image,enlaceFuente(t));}
      | 
      e=literal()
        {return e;} 
      | 
      "(" e=exp0() ")"
        {return e;}
     }
  Exp literal() : 
    {Token t;} 
     {
      t=<numeroEntero>
       {return ops.intFromString(t.image);}
      |
      t=<realNumber>
      {return ops.realFromString(t.image);}
      |
      t=<charLiteral>
      {System.out.println("Char literal triggered");
      return ops.charLiteral(t.image);}
      |
      t=<stringLiteral>
      {System.out.println("String literal triggered");
      return ops.stringLiteral(t.image);}
      |
      <TRUE>
       {return ops.boolct(true);}
      | 
      <FALSE> 
       {return ops.boolct(false);}
     }
    
